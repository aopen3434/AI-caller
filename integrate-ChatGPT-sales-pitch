#To integrate ChatGPT into a system where it answers SIP calls and interacts with customers, you can extend the existing Python script by incorporating a few different components:
#1.OpenAI API: Connect to OpenAI's GPT API to generate dynamic responses.
#2.SIP Handling: Use the existing PJSUA SIP trunk handling to answer incoming calls.
#3.Text-to-Speech (TTS) and Speech Recognition: Convert ChatGPT responses into audio for the caller and recognize their replies to continue the conversation.
#Below is an updated version of the previous script, integrating ChatGPT's API to respond to customer calls:
#Steps to Implement:
#1.Install the OpenAI Python Library:
#bash
#Copy code
#pip install openai
#2.Set Up Your OpenAI API Key: You need an API key from OpenAI. Store it securely in your script or environment.
#3.Updated Python Script:
#Here's how you can modify the script to include ChatGPT responses:
#python
#Copy code
import pjsua2 as pj
import speech_recognition as sr
import pyttsx3
import time
from pydub import AudioSegment
from pydub.playback import play
import openai
import os

# Set your OpenAI API key
openai.api_key = "YOUR_OPENAI_API_KEY"

# Initialize Text-to-Speech
tts_engine = pyttsx3.init()

# Initialize Speech Recognition
recognizer = sr.Recognizer()

# SIP setup
def log_cb(level, msg, length):
    print(msg)

class MyAccountCallback(pj.AccountCallback):
    def __init__(self, account=None):
        pj.AccountCallback.__init__(self, account)

    def on_incoming_call(self, call):
        call_cb = MyCallCallback(call)
        call.set_callback(call_cb)
        call.answer(180)  # Ring and then pick up after 2 rings
        time.sleep(6)
        call.answer(200)  # Answer the call

        # Start the conversation using ChatGPT
        response = get_chatgpt_response("Hello, how can I assist you today?")
        speak(response)

        while True:
            user_input = listen_for_response()
            if user_input:
                response = get_chatgpt_response(user_input)
                speak(response)

class MyCallCallback(pj.CallCallback):
    def __init__(self, call=None):
        pj.CallCallback.__init__(self, call)
    
    def on_state(self):
        print("Call is ", self.call.info().state_text)
    
    def on_media_state(self):
        if self.call.info().media_state == pj.MediaState.ACTIVE:
            print("Call is active")

# Function to play MP3 file
def play_mp3(file_path):
    sound = AudioSegment.from_mp3(file_path)
    play(sound)

# Function to convert ChatGPT response to speech
def speak(text):
    tts_engine.say(text)
    tts_engine.runAndWait()

# Function to listen for a response from the caller
def listen_for_response():
    with sr.Microphone() as source:
        print("Listening for customer response...")
        audio = recognizer.listen(source)
        try:
            return recognizer.recognize_google(audio)
        except sr.UnknownValueError:
            print("Sorry, could not understand the audio.")
            return None
        except sr.RequestError as e:
            print(f"Error with speech recognition service: {e}")
            return None

# Function to get a response from ChatGPT
def get_chatgpt_response(prompt):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=150,
        temperature=0.7
    )
    return response.choices[0].text.strip()

# Function to read numbers from file
def read_phone_numbers(file_path):
    with open(file_path, "r") as f:
        numbers = [line.strip() for line in f.readlines()]
    return numbers

# Main function to dial numbers and handle logic
def dial_numbers():
    phone_numbers = read_phone_numbers("C:/phone.txt")
    
    # Initialize SIP
    lib = pj.Lib()
    lib.init(log_cfg=pj.LogConfig(level=3, callback=log_cb))
    
    transport = lib.create_transport(pj.TransportType.UDP, pj.TransportConfig(5060))
    lib.start()

    acc_cfg = pj.AccountConfig(domain="your_sip_provider.com", username="your_username", password="your_password")
    acc = lib.create_account(acc_cfg)
    
    acc_cb = MyAccountCallback(acc)
    acc.set_callback(acc_cb)

    for number in phone_numbers:
        call = acc.make_call(f"sip:{number}@your_sip_provider.com", MyCallCallback())
        time.sleep(2)  # Wait for connection

        result = listen_for_response()
        if result and "hello" in result.lower():
            response = get_chatgpt_response("This is your sales pitch: Input#2.")
            speak(response)
        elif result and "beep" in result.lower():
            play_mp3("C:/U.mp3")

        call.hangup()
        time.sleep(2)  # Pause before next call

    lib.destroy()
    lib = None

if __name__ == "__main__":
    dial_numbers()
